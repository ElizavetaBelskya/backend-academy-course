plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.4'
	id 'io.spring.dependency-management' version '1.1.3'
	id 'org.liquibase.gradle' version '2.2.0'
}

group = 'ru.backend.academy'
version = '0.0.1'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}


repositories {
	mavenCentral()

}


dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.modelmapper:modelmapper:3.1.1'
	implementation 'com.opencsv:opencsv:4.1'
    testImplementation 'junit:junit:4.13.1'
    compileOnly 'org.projectlombok:lombok'
	implementation 'com.ibm.icu:icu4j:68.2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.testcontainers:postgresql:1.19.0'
	testImplementation 'org.testcontainers:testcontainers:1.19.1'
	testImplementation 'org.testcontainers:junit-jupiter:1.19.1'

	liquibaseRuntime 'org.liquibase:liquibase-core:4.24.0'
	liquibaseRuntime "org.postgresql:postgresql:42.2.24"
	runtimeOnly 'org.postgresql:postgresql'
}

def liquibaseProperties = new Properties()
file("src/main/resources/liquibase.properties").withInputStream { liquibaseProperties.load(it) }

liquibase {
	activities {
		main {
			changelogFile liquibaseProperties.getProperty("changelogFile")
			url liquibaseProperties.getProperty("url")
			username liquibaseProperties.getProperty("username")
			password liquibaseProperties.getProperty("password")
		}
	}
}


tasks.named('test') {
	useJUnitPlatform()
}
