/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package ru.tinkoff.seminar.kafkatesting.common.dto.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class PersonDtoAvro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3171976036602684238L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PersonDtoAvro\",\"namespace\":\"ru.tinkoff.seminar.kafkatesting.common.dto.avro\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"aboutMe\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"birthdate\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"children\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"ChildAvro\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"aboutMe\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"birthdate\",\"type\":[\"null\",\"string\"],\"default\":null}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<PersonDtoAvro> ENCODER =
      new BinaryMessageEncoder<PersonDtoAvro>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PersonDtoAvro> DECODER =
      new BinaryMessageDecoder<PersonDtoAvro>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<PersonDtoAvro> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<PersonDtoAvro> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<PersonDtoAvro>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this PersonDtoAvro to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a PersonDtoAvro from a ByteBuffer. */
  public static PersonDtoAvro fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public long id;
  @Deprecated public java.lang.CharSequence name;
  @Deprecated public java.lang.CharSequence aboutMe;
  @Deprecated public java.lang.CharSequence birthdate;
  @Deprecated public java.util.List<ru.tinkoff.seminar.kafkatesting.common.dto.avro.ChildAvro> children;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PersonDtoAvro() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param name The new value for name
   * @param aboutMe The new value for aboutMe
   * @param birthdate The new value for birthdate
   * @param children The new value for children
   */
  public PersonDtoAvro(java.lang.Long id, java.lang.CharSequence name, java.lang.CharSequence aboutMe, java.lang.CharSequence birthdate, java.util.List<ru.tinkoff.seminar.kafkatesting.common.dto.avro.ChildAvro> children) {
    this.id = id;
    this.name = name;
    this.aboutMe = aboutMe;
    this.birthdate = birthdate;
    this.children = children;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return name;
    case 2: return aboutMe;
    case 3: return birthdate;
    case 4: return children;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Long)value$; break;
    case 1: name = (java.lang.CharSequence)value$; break;
    case 2: aboutMe = (java.lang.CharSequence)value$; break;
    case 3: birthdate = (java.lang.CharSequence)value$; break;
    case 4: children = (java.util.List<ru.tinkoff.seminar.kafkatesting.common.dto.avro.ChildAvro>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.Long getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.Long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'aboutMe' field.
   * @return The value of the 'aboutMe' field.
   */
  public java.lang.CharSequence getAboutMe() {
    return aboutMe;
  }

  /**
   * Sets the value of the 'aboutMe' field.
   * @param value the value to set.
   */
  public void setAboutMe(java.lang.CharSequence value) {
    this.aboutMe = value;
  }

  /**
   * Gets the value of the 'birthdate' field.
   * @return The value of the 'birthdate' field.
   */
  public java.lang.CharSequence getBirthdate() {
    return birthdate;
  }

  /**
   * Sets the value of the 'birthdate' field.
   * @param value the value to set.
   */
  public void setBirthdate(java.lang.CharSequence value) {
    this.birthdate = value;
  }

  /**
   * Gets the value of the 'children' field.
   * @return The value of the 'children' field.
   */
  public java.util.List<ru.tinkoff.seminar.kafkatesting.common.dto.avro.ChildAvro> getChildren() {
    return children;
  }

  /**
   * Sets the value of the 'children' field.
   * @param value the value to set.
   */
  public void setChildren(java.util.List<ru.tinkoff.seminar.kafkatesting.common.dto.avro.ChildAvro> value) {
    this.children = value;
  }

  /**
   * Creates a new PersonDtoAvro RecordBuilder.
   * @return A new PersonDtoAvro RecordBuilder
   */
  public static ru.tinkoff.seminar.kafkatesting.common.dto.avro.PersonDtoAvro.Builder newBuilder() {
    return new ru.tinkoff.seminar.kafkatesting.common.dto.avro.PersonDtoAvro.Builder();
  }

  /**
   * Creates a new PersonDtoAvro RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PersonDtoAvro RecordBuilder
   */
  public static ru.tinkoff.seminar.kafkatesting.common.dto.avro.PersonDtoAvro.Builder newBuilder(ru.tinkoff.seminar.kafkatesting.common.dto.avro.PersonDtoAvro.Builder other) {
    return new ru.tinkoff.seminar.kafkatesting.common.dto.avro.PersonDtoAvro.Builder(other);
  }

  /**
   * Creates a new PersonDtoAvro RecordBuilder by copying an existing PersonDtoAvro instance.
   * @param other The existing instance to copy.
   * @return A new PersonDtoAvro RecordBuilder
   */
  public static ru.tinkoff.seminar.kafkatesting.common.dto.avro.PersonDtoAvro.Builder newBuilder(ru.tinkoff.seminar.kafkatesting.common.dto.avro.PersonDtoAvro other) {
    return new ru.tinkoff.seminar.kafkatesting.common.dto.avro.PersonDtoAvro.Builder(other);
  }

  /**
   * RecordBuilder for PersonDtoAvro instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PersonDtoAvro>
    implements org.apache.avro.data.RecordBuilder<PersonDtoAvro> {

    private long id;
    private java.lang.CharSequence name;
    private java.lang.CharSequence aboutMe;
    private java.lang.CharSequence birthdate;
    private java.util.List<ru.tinkoff.seminar.kafkatesting.common.dto.avro.ChildAvro> children;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(ru.tinkoff.seminar.kafkatesting.common.dto.avro.PersonDtoAvro.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.aboutMe)) {
        this.aboutMe = data().deepCopy(fields()[2].schema(), other.aboutMe);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.birthdate)) {
        this.birthdate = data().deepCopy(fields()[3].schema(), other.birthdate);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.children)) {
        this.children = data().deepCopy(fields()[4].schema(), other.children);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing PersonDtoAvro instance
     * @param other The existing instance to copy.
     */
    private Builder(ru.tinkoff.seminar.kafkatesting.common.dto.avro.PersonDtoAvro other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.aboutMe)) {
        this.aboutMe = data().deepCopy(fields()[2].schema(), other.aboutMe);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.birthdate)) {
        this.birthdate = data().deepCopy(fields()[3].schema(), other.birthdate);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.children)) {
        this.children = data().deepCopy(fields()[4].schema(), other.children);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.Long getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public ru.tinkoff.seminar.kafkatesting.common.dto.avro.PersonDtoAvro.Builder setId(long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public ru.tinkoff.seminar.kafkatesting.common.dto.avro.PersonDtoAvro.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public ru.tinkoff.seminar.kafkatesting.common.dto.avro.PersonDtoAvro.Builder setName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public ru.tinkoff.seminar.kafkatesting.common.dto.avro.PersonDtoAvro.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'aboutMe' field.
      * @return The value.
      */
    public java.lang.CharSequence getAboutMe() {
      return aboutMe;
    }

    /**
      * Sets the value of the 'aboutMe' field.
      * @param value The value of 'aboutMe'.
      * @return This builder.
      */
    public ru.tinkoff.seminar.kafkatesting.common.dto.avro.PersonDtoAvro.Builder setAboutMe(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.aboutMe = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'aboutMe' field has been set.
      * @return True if the 'aboutMe' field has been set, false otherwise.
      */
    public boolean hasAboutMe() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'aboutMe' field.
      * @return This builder.
      */
    public ru.tinkoff.seminar.kafkatesting.common.dto.avro.PersonDtoAvro.Builder clearAboutMe() {
      aboutMe = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'birthdate' field.
      * @return The value.
      */
    public java.lang.CharSequence getBirthdate() {
      return birthdate;
    }

    /**
      * Sets the value of the 'birthdate' field.
      * @param value The value of 'birthdate'.
      * @return This builder.
      */
    public ru.tinkoff.seminar.kafkatesting.common.dto.avro.PersonDtoAvro.Builder setBirthdate(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.birthdate = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'birthdate' field has been set.
      * @return True if the 'birthdate' field has been set, false otherwise.
      */
    public boolean hasBirthdate() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'birthdate' field.
      * @return This builder.
      */
    public ru.tinkoff.seminar.kafkatesting.common.dto.avro.PersonDtoAvro.Builder clearBirthdate() {
      birthdate = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'children' field.
      * @return The value.
      */
    public java.util.List<ru.tinkoff.seminar.kafkatesting.common.dto.avro.ChildAvro> getChildren() {
      return children;
    }

    /**
      * Sets the value of the 'children' field.
      * @param value The value of 'children'.
      * @return This builder.
      */
    public ru.tinkoff.seminar.kafkatesting.common.dto.avro.PersonDtoAvro.Builder setChildren(java.util.List<ru.tinkoff.seminar.kafkatesting.common.dto.avro.ChildAvro> value) {
      validate(fields()[4], value);
      this.children = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'children' field has been set.
      * @return True if the 'children' field has been set, false otherwise.
      */
    public boolean hasChildren() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'children' field.
      * @return This builder.
      */
    public ru.tinkoff.seminar.kafkatesting.common.dto.avro.PersonDtoAvro.Builder clearChildren() {
      children = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PersonDtoAvro build() {
      try {
        PersonDtoAvro record = new PersonDtoAvro();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.aboutMe = fieldSetFlags()[2] ? this.aboutMe : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.birthdate = fieldSetFlags()[3] ? this.birthdate : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.children = fieldSetFlags()[4] ? this.children : (java.util.List<ru.tinkoff.seminar.kafkatesting.common.dto.avro.ChildAvro>) defaultValue(fields()[4]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PersonDtoAvro>
    WRITER$ = (org.apache.avro.io.DatumWriter<PersonDtoAvro>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PersonDtoAvro>
    READER$ = (org.apache.avro.io.DatumReader<PersonDtoAvro>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
